using System;
using System.IO;
using System.Security.Cryptography;
using System.Text;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using Renci.SshNet.Security;
using Renci.SshNet.Tests.Common;

namespace Renci.SshNet.Tests.Classes.Security.Cryptography
{
    [TestClass]
    public class DsaKeyTest : TestBase
    {
        private static DsaKey GetDsaKey(string fileName, string passPhrase = null)
        {
            using (var stream = GetData(fileName))
            {
                return (DsaKey)new PrivateKeyFile(stream, passPhrase).Key;
            }
        }

        // This is just to line up any differences in the assertion message.
        private static void AssertEqual(byte[] actualBytes, string expectedHex)
        {
            string actualHex = BitConverter.ToString(actualBytes).Replace("-", "");

            Assert.AreEqual(expectedHex, actualHex,
                $"{Environment.NewLine}Expected: {expectedHex}{Environment.NewLine}  Actual: {actualHex}");
        }

        // These tests generated by converting the keys to PKCS8, importing them to BCL DSA,
        // and printing out the expected DSAParameter values.

        // Some useful commands:

        // Generate a new params file with specific parameters:
        // openssl genpkey -genparam -algorithm dsa -pkeyopt pbits:1024 -pkeyopt qbits:160 -out dsa.1024.params

        // Generate PKCS8 key file from the params:
        // openssl genpkey -paramfile dsa.1024.params -out dsa.1024.txt

        // Convert to PKCS1:
        // openssl pkcs8 -in dsa.1024.txt -nocrypt -traditional -out dsa.1024.pkcs1.txt

        // Convert PKCS1 to ssh.com:
        // puttygen dsa.1024.pkcs1.txt -O private-sshcom -o dsa.1024.ssh2.txt

        // Convert to PKCS8:
        // openssl pkcs8 -topk8 -nocrypt -in Key.DSA.txt -out Key.DSA.PKCS8.txt

        /*
        
        using IndentedTextWriter tw = new(Console.Out);

        foreach (string filePath in Directory.EnumerateFiles(dir, "*.DSA.*txt"))
        {
            string pkFile = Path.GetFileNameWithoutExtension(filePath);

            tw.WriteLine("[TestMethod]");
            tw.WriteLine($"public void {pkFile.Replace('.', '_')}()");
            tw.WriteLine("{");
            tw.Indent++;
    
            tw.WriteLine($"DsaKey dsaKey = GetDsaKey(\"{pkFile}.txt\");");
            tw.WriteLine();
            tw.WriteLine("DSAParameters p = dsaKey.GetDSAParameters();");
            tw.WriteLine();

            using DSA dsa = DSA.Create();

            dsa.ImportFromPem(File.ReadAllText(filePath));
    
            DSAParameters p = dsa.ExportParameters(true);

            WriteParamAssert(p.P);
            WriteParamAssert(p.G);
            WriteParamAssert(p.Y);
            WriteParamAssert(p.Q);
            WriteParamAssert(p.X);
    
            tw.Indent--;
            tw.WriteLine("}");
            tw.WriteLine();
        }

        void WriteParamAssert(byte[] bytes, [CallerArgumentExpression(nameof(bytes))] string name = null)
        {
            tw.WriteLine($"AssertEqual({name}, \"{Convert.ToHexString(bytes)}\");");
        }
         */

        [TestMethod]
        public void Key_DSA()
        {
            DsaKey dsaKey = GetDsaKey("Key.DSA.txt");

            Assert.AreEqual(1024, dsaKey.P.BitLength);
            Assert.AreEqual(160, dsaKey.Q.BitLength);

            DSAParameters p = dsaKey.GetDSAParameters();

            AssertEqual(p.P, "B565DDF69ED8EE2AC2C00AF794944A15F428C50D3FECA5FEE4F79461FD4FF669B671D296B4F19D35970A5D20F752847826849C30E12F19B8682BF5020E01FF2BDC338BB7E2A92668D2F2D8B880C62A9DA1B65C346EB53EAC2A779203929DFC2C1B27F2D99BD76C6EF4D6A5A547CE892101D5CC82AF8CC564CAE6D30B5DC89415");
            AssertEqual(p.G, "0E549E37E14011DC79FA940E6758D7C53AE5151F75BB9C968FD054098883F1EC651B7713BDAAD0CD4DB5A458BDDCF6AC79F81ECE95EE3133B72FC973EB3505180C7085952F947B6C7721E26B91D7D9907F5E3CFDB9CB9034278FDCFBC5D7BD06A3E330399DFC35DE8CB93EDC9DEDDDCAAB9B440CCF0A8957488709178D40373D");
            AssertEqual(p.Y, "9BC2066506AD4BB33A01F3484CD586E1323B6766914232DBF7F316248203EDCFD5438CDD4D9746DE4A64D068FD9F8C6B7A8A4AE4D99801D8FCAED15F3C18265E5B6C2EAB7E6C1717929C56FFFED60B6F563975B7B7DD3249387E716B967EBF5F57B99FE1097FEAEFD9220A5036F9CD61ECDACEDDDF2BC1178C8D5D01712E4311");
            AssertEqual(p.Q, "AEFA2364A9FFD838062362B1D20871665807C461");
            AssertEqual(p.X, "18463B393E02299EA1BF7AE04F3E1EC40D97275E");
        }


        [TestMethod]
        public void Key_SSH2_DSA_Encrypted_Des_Ede3_CBC_12345()
        {
            DsaKey dsaKey = GetDsaKey("Key.SSH2.DSA.Encrypted.Des.Ede3.CBC.12345.txt", "12345");

            Assert.AreEqual(1024, dsaKey.P.BitLength);
            Assert.AreEqual(160, dsaKey.Q.BitLength);

            DSAParameters p = dsaKey.GetDSAParameters();

            AssertEqual(p.P, "8F20C8715C86456190F8B0921923143A8DEB0DA71564EA572F6C2E316CDFCA0458B329030F7E735DF67AB529B4084D43A2595005591A596FFF7579864B120F20A17BD598E487EC3A587A5F475C642C012B2B04CD094FC8C16A02D6DCF6EBFBA1458DCC17EF11BB55E9637F5667265DFEDDCA8DC40555DB04574F97534A0BB5BD");
            AssertEqual(p.G, "04B63D3DBA0C7F4DD97A6E8ED7EA65F5EE17205602317188F954D38D83693A20799116B88BBE261A4BAF26201E121B78E6BEFC5B5C01AA4756D6054AEFF749F4C29C7172EB8DA02172949432BAA524CD2B141DBD1631C9DC67FB4142DF8D267441D59A7DB30F27DB4A1CA60DD654F75A5D3B5CE2993CDCD601EB2C06E9414FBE");
            AssertEqual(p.Y, "17F837B9770A37DCB325F56F08BC0E1D63C435C2C85DC9C006273872FAA605F5D09CC03D4F83EE046CF8D83E6CC9A29B15ACAF7BBFD421C7261C5CCAFF887867806C1DF6760DCF348AC7AEB9BE44A3CF27895A9790F9FBCD57708B22D3F4D72A5B52B78CFACF95CF5C28AF98E82CA7034B85F4A10D1121564D1079DE92E2EE16");
            AssertEqual(p.Q, "D8D7E6D3B7BB3688D998A011380BD85D5910B279");
            AssertEqual(p.X, "23FA5A574AF1197B185B88008A7A7527899FD092");
        }

        [TestMethod]
        public void Key_SSH2_DSA()
        {
            DsaKey dsaKey = GetDsaKey("Key.SSH2.DSA.txt");

            Assert.AreEqual(1024, dsaKey.P.BitLength);
            Assert.AreEqual(160, dsaKey.Q.BitLength);

            DSAParameters p = dsaKey.GetDSAParameters();

            AssertEqual(p.P, "E0921AE3B1C58FC3401A301BB7E44B7D00266C0DE1F0CF5D3A324DA01AC70A4E5A71895C58603F8225F8648A9696B19D45A46A32A931CD5BD6185AC0F58DE2CC684FC4116FA4805B7D04AE74FFA54B6CC6AA059641656B8C6F59280D02E1C0564501AE03EC278B077A149B3459F723AABC46095EDA3C870C74CEA8F8F62845E1");
            AssertEqual(p.G, "2BBCFEC01A1E6363ECF179045BE76CF17146A644191560BFDF7AB749362F61A0CF1968EE3EF9782CF3031BA66A04721F43B1776DB9F8EA5D6A64EF2C253E371D861B1BDCCC4901E11E16D4D1B2EDBF2144CAA8A3C720E82888FCECF2AEBD0315A1575D1A0C351D6162E4A8F57FB4C1A5E92FE30BBBD324B9A166E9B8054BFC31");
            AssertEqual(p.Y, "B75F681CF20FCAFFFC99B31A629BBC23A92F8F5FFDEC48F0D2778DEC277D70664BA883C1C13C941C442F292026E01BCD3F42DEDC90E7DD115ACA14667FEF11AC0992E1DD4C8EB08EB3A7E67B22E7936913A513C5676C741F5B9D211021CD17A1C9F8FA3AC0079FB25C96BFA6A83868ABB9C87C2DED4A05B1147E60F78F3EEE4B");
            AssertEqual(p.Q, "BBE34624549755A532514F177D3328B4371DEDE3");
            AssertEqual(p.X, "66504B5D937CD2319275BA6527352A39CC2F94C4");
        }

        [TestMethod]
        public void Key_DSA_3072_256() // delete 
        {
            var keyString = """
            -----BEGIN DSA PRIVATE KEY-----
            MIIE1QIBAAKCAYEAtAdLEc+EX07PpPJq1wPcFo17xJA7qaYA/Ef+9PNpde3O6ZFu
            cDZU65xg/wIu+e5FAj1tLtwA3V3hAX3C0hj5Tse8I84nog7Jo2b0c/MUGEYyAsop
            pEyPTshn44+lNyM3e9OONK+kP9ZtE9Bj6/f7GkF2/3s7VQ0oLBFWULiHGKWEBVwn
            EsuNq//5RCSs1Tw2VSLpnFC9EM18pqdWUkVmN0xtvRx0RyNhtChU0Qf19e1dpY8r
            diJXLLuKXxVu5MkkeLGPsT5znK4TI28At9xoeQnXhcgD/ddIvs24nVujhfwUN8aw
            LureThWDAyFgtkEuxyCAGk0OwjpBqKHeGwOvtrwSMWzOxcaX1eSE6LbI284jWPRZ
            h8EtutF+yme1x/JFbYCWQwLjFlcrsBSWaIFjUJBYozJe9vwBB4SdIMfkj//26Clm
            tiGI08RAfMWKDO/1NHI/LR+Z1g3RrGWwO/fIXNsR6gSp5uV4Wxm/Fs7c0Re458AH
            VMn1e8faEwrs3O1DAiEAlyKR5Pw7z/+OmBqpXyBYPAA9bDxiXP0iqRhKCdXKNekC
            ggGACj7sSYBFWEihpx7JIwfEnKCd8YTBfCLWrs5ZwrhND4PIgMg9rLxQc76kBYuq
            nnb0wxwR3RmVyIHB8KD7c/AhE5tCO5d2VayVr/ATHtWyTGnejT3N3NYtHlDffJLQ
            bCgHVnWZK9Mvr+H4UaN0bBqOSvSYUsHHAa9OKHWaIz4XLqBmbZwsw+FBiVm1l4Fo
            n5lSiztT7qzLraL2VD8JPnA6Sp9DUNp24F8H35eUMann9jdO7UD02q2HFDpUZmhQ
            8xTO3ONiHLbjFd7nLKILyQ/pv4YfupJdItmqvlIwygN6AzwM3Pa25RTX7PyS16CX
            RdMGsnFIrVruu431qIouut54bSVdLm2n5sHnpVy2AoeXSzOvDs8S6sq+9aXhfT6F
            23RdpHXa3HnGXbg/as4QXuXUzpnDZwRD6bZ+0ec9G39IgU4hAa0AUMtZzB3ODjvT
            8qdacAfvjj1doQCQMufb+GfH5l2mOFV/+MmRn0KYVWUfdI+iSnyi4HM/GwrITYyw
            8wNNAoIBgAKxFZB3JI/Z9LuJZhdfrnY+MZQa8lxO/Z4xfo7goJVMuGHuxhFFDTXL
            xe17P2pojyzlq9IoUpPEeeBFq1/6IGzE7RejSs1vqcmIXDCC7Xvnqxi9AUjBmoVF
            xjWhJcSmwPcOI3Y/mflA2nElfMrPvVw4MtoY+P/rpWieujNfbOoBplDDKCxcNZE5
            P3BedQQxPKk4C9gi8KcrpJIsevDCJxoGXyuAAI1oGkJY6hvCiANX96KqLSeuyvHz
            LM7VRaIteabg9Mp26e+JAhAxKlH6Xbh9p1sA72+A5x7xiAtry9UKq6s1/Fu0y4xD
            ZAxTgEvHOiDwDgNCXMTJQPLBCUn1ACXMIw0nL0+bb2HHRCjRB667T340JdMYyFSL
            RX6foxC9tX8F0JhQ3JbRpYHWs09saUv02+avuqIAQC0n1ILY6huVzFc6ibHeNXa8
            kZTQzJt0Y5/dsRxn3x5tHDKr4GRwAcurKr+gItdN03OAcKDVufz9LmjPH2EkLdn9
            olINq/lJqAIgSAIUJSj/fRYso/bxFUJJ0xaK08u5HusXw+hCWcCqQGU=
            -----END DSA PRIVATE KEY-----
            """;

            using MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(keyString));

            DsaKey dsaKey = (DsaKey)new PrivateKeyFile(stream).Key;

            Assert.AreEqual(3072, dsaKey.P.BitLength);
            Assert.AreEqual(256, dsaKey.Q.BitLength);

            DSAParameters p = dsaKey.GetDSAParameters();

            AssertEqual(p.P, "B4074B11CF845F4ECFA4F26AD703DC168D7BC4903BA9A600FC47FEF4F36975EDCEE9916E703654EB9C60FF022EF9EE45023D6D2EDC00DD5DE1017DC2D218F94EC7BC23CE27A20EC9A366F473F31418463202CA29A44C8F4EC867E38FA53723377BD38E34AFA43FD66D13D063EBF7FB1A4176FF7B3B550D282C115650B88718A584055C2712CB8DABFFF94424ACD53C365522E99C50BD10CD7CA6A756524566374C6DBD1C74472361B42854D107F5F5ED5DA58F2B7622572CBB8A5F156EE4C92478B18FB13E739CAE13236F00B7DC687909D785C803FDD748BECDB89D5BA385FC1437C6B02EEADE4E1583032160B6412EC720801A4D0EC23A41A8A1DE1B03AFB6BC12316CCEC5C697D5E484E8B6C8DBCE2358F45987C12DBAD17ECA67B5C7F2456D80964302E316572BB01496688163509058A3325EF6FC0107849D20C7E48FFFF6E82966B62188D3C4407CC58A0CEFF534723F2D1F99D60DD1AC65B03BF7C85CDB11EA04A9E6E5785B19BF16CEDCD117B8E7C00754C9F57BC7DA130AECDCED43");
            AssertEqual(p.G, "0A3EEC4980455848A1A71EC92307C49CA09DF184C17C22D6AECE59C2B84D0F83C880C83DACBC5073BEA4058BAA9E76F4C31C11DD1995C881C1F0A0FB73F021139B423B977655AC95AFF0131ED5B24C69DE8D3DCDDCD62D1E50DF7C92D06C28075675992BD32FAFE1F851A3746C1A8E4AF49852C1C701AF4E28759A233E172EA0666D9C2CC3E1418959B59781689F99528B3B53EEACCBADA2F6543F093E703A4A9F4350DA76E05F07DF979431A9E7F6374EED40F4DAAD87143A54666850F314CEDCE3621CB6E315DEE72CA20BC90FE9BF861FBA925D22D9AABE5230CA037A033C0CDCF6B6E514D7ECFC92D7A09745D306B27148AD5AEEBB8DF5A88A2EBADE786D255D2E6DA7E6C1E7A55CB60287974B33AF0ECF12EACABEF5A5E17D3E85DB745DA475DADC79C65DB83F6ACE105EE5D4CE99C3670443E9B67ED1E73D1B7F48814E2101AD0050CB59CC1DCE0E3BD3F2A75A7007EF8E3D5DA1009032E7DBF867C7E65DA638557FF8C9919F429855651F748FA24A7CA2E0733F1B0AC84D8CB0F3034D");
            AssertEqual(p.Y, "02B1159077248FD9F4BB8966175FAE763E31941AF25C4EFD9E317E8EE0A0954CB861EEC611450D35CBC5ED7B3F6A688F2CE5ABD2285293C479E045AB5FFA206CC4ED17A34ACD6FA9C9885C3082ED7BE7AB18BD0148C19A8545C635A125C4A6C0F70E23763F99F940DA71257CCACFBD5C3832DA18F8FFEBA5689EBA335F6CEA01A650C3282C5C3591393F705E7504313CA9380BD822F0A72BA4922C7AF0C2271A065F2B80008D681A4258EA1BC2880357F7A2AA2D27AECAF1F32CCED545A22D79A6E0F4CA76E9EF890210312A51FA5DB87DA75B00EF6F80E71EF1880B6BCBD50AABAB35FC5BB4CB8C43640C53804BC73A20F00E03425CC4C940F2C10949F50025CC230D272F4F9B6F61C74428D107AEBB4F7E3425D318C8548B457E9FA310BDB57F05D09850DC96D1A581D6B34F6C694BF4DBE6AFBAA200402D27D482D8EA1B95CC573A89B1DE3576BC9194D0CC9B74639FDDB11C67DF1E6D1C32ABE0647001CBAB2ABFA022D74DD3738070A0D5B9FCFD2E68CF1F61242DD9FDA2520DABF949A8");
            AssertEqual(p.Q, "972291E4FC3BCFFF8E981AA95F20583C003D6C3C625CFD22A9184A09D5CA35E9");
            AssertEqual(p.X, "4802142528FF7D162CA3F6F1154249D3168AD3CBB91EEB17C3E84259C0AA4065");
        }
    }
}
